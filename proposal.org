#+TITLE: LOG792 - Project Proposal

* A Speculative Multithreading System
A generic software only implementation.

** TODO Problems and Context
This section will describe the current state of parallelising a sequential program and the various problems that we aim to solve with the proposed project.

*** TODO Manual Parallelization
Parallelising is hard and is pretty hard to get right in some languages due to poor memory models and synchronisation primitives. Algo can also become extremely complex.

*** TODO Automatic para
Usual automatic para tries really hard to use static analysis to extract para. Sadly there are many cases of partial or almost fully parallelisable code that can't be detected during compilation.

*** TODO Current SMT
Current research on SMT usually only deal with specific use case or relies heavily on hardware additions to get things done.


** TODO Goals for the Project
The project as a whole is too large to be fully completed during the timeframe for this project. So instead we aim at building a solid base that can be used to gradually build the full system.

*** TODO Run-time Kernel
Build a solid and fast kernel to detect run-time dependencies violations.

*** TODO Code injection
LLVM proof of concept capable of handling simple loops.

*** TODO Optimizer
This isn't a necessary component to have a working system so we will only limit ourself to documenting and planning the runtime profiler and code optimizer.


** TODO Méthodology
*** Iterative approach
There are several risks and unkown associated with some of the key components (see risk section) which makes it hard to properly scope how much can be done during this project.
To compensate, we'll heavily iterate constructing bit by bit each key components.

*** Profiling & optimization
Heavy performance test at each iteration to ensure we get proper speed-ups.
This also includes the construction/research of benchmarks

*** High level doc
We'll create high level docs (vision, srs) to describe the problems we aim to fix.

*** Low level docs
To ensure correctness, we'll create a series of docs (arch, algo desc & proofs) to properly describe the internals.


** DONE Composition de l'équipe et rôles.
N/A


** DONE Livrables et Planification

*** DONE Description des artéfacts

| Artefact       | Description                                                                                          |
|----------------+------------------------------------------------------------------------------------------------------|
| Vision         | Description of the problem and needs being filled                                                    |
|----------------+------------------------------------------------------------------------------------------------------|
| SRS            | Description of the specs of our system                                                               |
|----------------+------------------------------------------------------------------------------------------------------|
| Arch           | Description of the components and their interaction                                                  |
|----------------+------------------------------------------------------------------------------------------------------|
| Algos & Proofs | Description of the concurrent algorithms and data structures accompagnied with proof of correctness. |
|----------------+------------------------------------------------------------------------------------------------------|
| Test & perf    | Description of the testing methodology and the performance results                                   |
|----------------+------------------------------------------------------------------------------------------------------|
| Code           | Code for both the runtime kernel and the code injection modules.                                     |
|----------------+------------------------------------------------------------------------------------------------------|



*** DONE Planifications
High level desc of Annexe A.


** DONE Risques

| Risk                         | Impact | Probability | Mitigation                                                                               |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Project objectives           | Low    | Low         | Use a vision document to clearly define the objectives.                                  |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Hardware constraints         | Medium | Low         | Request specialized hardware from the school.                                            |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Reusable components          | Medium | Medium      | Research data-flow analysis algorithms in case we can't reuse the ones provided by LLVM. |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Project size                 | Medium | Medium      | Break the implementation in short 1 week chunks with plenty of testing.                  |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Requirements stability       | High   | Low         | Use a specification document to clearly define the requirements.                         |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Testability                  | High   | Medium      | Allocate extra time to isolate and test difficult and critical areas.                    |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Implementation difficulty    | Medium | High        | Fallback to simpler algorithms if necessary. Could negatively affect performances.       |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Performance factors          | High   | High        | Allocate an iteration for performance testing and optimization.                          |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| External HW or SW interfaces | Low    | Medium      | Segregate/proxy any potential portability issues and test on multiple platforms.         |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Technology experience        | High   | High        | Locate and read available documentation.                                                 |
|------------------------------+--------+-------------+------------------------------------------------------------------------------------------|
| Maturity of Technology       | Medium | High        | Locate and read research papers available on the subject.                                |


** DONE Techniques and Tools
This section describes the various tools that will be used to develop and manage the project.

*** DONE Project Management
For the size of this project, emacs' org-mode will be enough to manage the project. It is not necessary to use a more robust tool like Microsoft Project because all of our features have to be developped in a sequence. Org-mode's file are also much easier to manage in versionning software like git or svn.

*** DONE Document Control
Git will be used as version control for the source code and documents of our project. Since the resulting will be open sourced under the FreeBSD license, github.com will be used as a remote repository for the project at no extra costs. The github repositories for the project can be found here:

**** DONE Documents: https://github.com/RAttab/yarn-doc
**** DONE Source code: https://github.com/RAttab/yarn

*** DONE Code Development
The project will mostly use the standard linux toolchain for the development. This includes autotools, gcc, glibc, pthreads, etc. The code will also adhere to either the clean C or the C99 standard to keep it as portable as possible. The code injection part of the system wil be developped using the clang front-end for LLVM and should be conformant to the LLVM coding standards. 


** TODO Références
*** "Art of MP Prog"
*** "Dragon Book"
*** Gotta fish more research docs


** DONE Annexe

*** DONE A. Plan de travail
Note that the effort present proportions more then actual efforts.
The start and end column represents the range of weeks inclusively that the task will be accomplished.

|     # | Start | End | Effort | Task/Milestone                      | Deliverables        |
|-------+-------+-----+--------+-------------------------------------+---------------------|
|     1 |     1 |   5 |     20 | Analysis                            |                     |
|   1.1 |     1 |   3 |      5 | Scoped project planification        | Project Proposal    |
|   1.2 |     3 |   5 |     15 | Full system analysis                | Vision              |
|-------+-------+-----+--------+-------------------------------------+---------------------|
|     2 |     6 |  11 |     40 | Conception                          |                     |
|   2.1 |     6 |   8 |     20 | Elicitation of system specification | SRS                 |
|   2.2 |     9 |  11 |     20 | Definition of module interaction    | Architecture        |
|-------+-------+-----+--------+-------------------------------------+---------------------|
|     3 |     1 |  14 |     70 | Development                         |                     |
|   3.1 |     1 |   7 |     35 | Runtime-kernel module               |                     |
| 3.1.1 |     1 |   1 |      5 | Conception                          | Algo desc & proofs  |
| 3.1.2 |     2 |   6 |     15 | Implementation                      | Code                |
| 3.1.3 |     3 |   7 |     15 | QA                                  | Test & perf         |
|   3.2 |     8 |  14 |     35 | Code injection module               |                     |
| 3.2.1 |     8 |  11 |     20 | Conception & Research               | Architecture        |
| 3.2.2 |     9 |  14 |     15 | Implementation                      | Code                |
|-------+-------+-----+--------+-------------------------------------+---------------------|
|     4 |    12 |  15 |     10 | Documentation                       |                     |
|   4.1 |    12 |  14 |      4 | Project presentation and demo       | Presentation slides |
|   4.2 |     7 |  15 |      6 | Project synthesis                   | Final repport       |
| 4.2.1 |    ?? |  ?? |      1 | Synthesis outline                   | Progress Repport    |
| 4.2.2 |    13 |  15 |      5 | Synthesis repport                   | Synthesis repport   |
|-------+-------+-----+--------+-------------------------------------+---------------------|
| Total |     1 |  15 |    140 |                                     |                     |
|-------+-------+-----+--------+-------------------------------------+---------------------|

