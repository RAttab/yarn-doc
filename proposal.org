#+TITLE: LOG792 - Project Proposal

* A Speculative Multithreading System
A generic software only implementation.

** TODO Problems and Context
This section will describe the current state of parallelising a sequential program and the various problems that we aim to solve with the proposed project.

*** TODO Manual Parallelization
Parallelising is hard and is pretty hard to get right in some languages due to poor memory models and synchronisation primitives. Algo can also become extremely complex.

*** TODO Automatic para
Usual automatic para tries really hard to use static analysis to extract para. Sadly there are many cases of partial or almost fully parallelisable code that can't be detected during compilation.

*** TODO Current SMT
Current research on SMT usually only deal with specific use case or relies heavily on hardware additions to get things done.


** TODO Goals for the Project
The project as a whole is too large to be fully completed during the timeframe for this project. So instead we aim at building a solid base that can be used to gradually build the full system.

*** TODO Run-time Kernel
Build a solid and fast kernel to detect run-time dependencies violations.

*** TODO Code injection
LLVM proof of concept capable of handling simple loops.

*** TODO Optimizer
This isn't a necessary component to have a working system so we will only limit ourself to documenting and planning the runtime profiler and code optimizer.


** TODO Méthodology
*** Iterative approach
There are several risks and unkown associated with some of the key components (see risk section) which makes it hard to properly scope how much can be done during this project.
To compensate, we'll heavily iterate constructing bit by bit each key components.

*** Profiling & optimization
Heavy performance test at each iteration to ensure we get proper speed-ups.
This also includes the construction/research of benchmarks

*** High level doc
We'll create high level docs (vision, srs) to describe the problems we aim to fix.

*** Low level docs
To ensure correctness, we'll create a series of docs (arch, algo desc & proofs) to properly describe the internals.


** DONE Composition de l'équipe et rôles.
N/A


** TODO Livrables et Planification
*** TODO Description des artéfacts

| Artefact      | Description                                                        |
|---------------+--------------------------------------------------------------------|
| Vision        | Description of the problem and needs being filled                  |
| SRS           | Description of the specs of our system                             |
| Arch          | Description of the components and their interaction                |
| Algo & Proofs | Description of the numurous homebrewed data structures             |
|               | along with the proofs needed to ensure the correctness of the      |
|               | different concurrent algorithms.                                   |
| Test & perf   | Description of the testing methodology and the performance results |


*** TODO Planifications
High level desc of Annexe A.


** TODO Risques

| Risk                 | Impact | Prob   | Mitigation                                   |
|----------------------+--------+--------+----------------------------------------------|
| Not enough speed-up  | High   | High   | Lots of profiling, testing and optimisation  |
|                      |        |        | with standard benchmarks. Assign an entire   |
|                      |        |        | iteration to this.                           |
| Concurrency problems | Medium | Medium | Fall back on simpler lock algorithms instead |
|                      |        |        | of the more complicated lock-free algos.     |
|                      |        |        | This could negetively impact the speed-up.   |
| Slowdown dev because | Low    | High   | Plan for some extra learning time during the |
| of unknown tools     |        |        | code injection phase since this mainly       |
|                      |        |        | affects the LLVM and clang tool.             |
| Can't use LLVM tools | Medium | Low    | Assign extra iteration to create my own.     |
| Loss of code and doc | High   | Low    | Use git and github for version control and   |
|                      |        |        | backup.                                      |


** DONE Techniques and Tools
This section describes the various tools that will be used to develop and manage the project.

*** DONE Project Management
For the size of this project, emacs' org-mode will be enough to manage the project. It is not necessary to use a more robust tool like Microsoft Project because all of our features have to be developped in a sequence. Org-mode's file are also much easier to manage in versionning software like git or svn.

*** DONE Document Control
Git will be used as version control for the source code and documents of our project. Since the resulting will be open sourced under the FreeBSD license, github.com will be used as a remote repository for the project at no extra costs. The github repositories for the project can be found here:

**** DONE Documents: https://github.com/RAttab/yarn-doc
**** DONE Source code: https://github.com/RAttab/yarn

*** DONE Code Development
The project will mostly use the standard linux toolchain for the development. This includes make, gcc, glibc, pthreads, etc. The code will also adhere to either the clean C or the C99 standard to keep it as portable as possible. The code injection part of the system wil be developped using the clang front-end for LLVM and should be conformant to the LLVM coding standards. 


** TODO Références
*** "Art of MP Prog"
*** "Dragon Book"
*** Gotta fish more research docs.


** TODO Annexe

*** TODO A. Plan de travail

| # | Start | End | Est | Task | Artefact |
|---+-------+-----+-----+------+----------|
| 1 |       |     |     |      |          |
